[动态访问控制组件]
ifndef::sourcedir[:sourcedir: ../../main/java/group/devtool/access/documentation/]
ifndef::resourcedir[:resourcedir: ../../main/resources/]
ifndef::imagedir[:imagedir: ./image/]
= 动态访问控制组件

[[背景]]
== 背景
在企业管理系统中，存在以下场景：

* 涉及状态流转的业务单据，同一角色对于同一业务单据在不同状态下有不同的操作。
* 客户关系管理系统中，对于同一个客户，随着销售团队成员的变化，自动赋予新增成员对于客户的数据权限，操作权限。
* 其他动态数据决定访问权限的场景。

对于RBAC模型来说，如果满足以上场景，大部分情况下都需要额外的定制开发，另外，通过编码实现的访问控制，随着规则的变化很难直观的了解到每个资源的访问控制策略，因此，开发设计了 **access** 动态访问控制组件，通过直观的配置实现复杂的访问控制策略，尤其在涉及动态数据的访问控制时，不需求额外的开发，只需要组织好访问控制元数据，通过动态配置即可满足访问控制的要求。

[[快速开始]]
== 快速开始
[[环境准备]]
=== 环境准备
* Java版本： JDK 8
* http://maven.apache.org/[Apache Maven]
[[依赖配置]]

=== 依赖配置
在项目的 *pom.xml* 文件中增加以下maven配置
[source, XML]
----
<dependencies>
  <dependency>
    <groupId>group.devtool.access.engine</groupId>
    <artifactId>engine</artifactId>
    <version>1.0-SNAPSHOT</version>
  </dependency>
</dependencies>
----

[[演示代码]]
=== 演示代码
完整的演示代码：
基于文件的规则策略定义
[source, YAML]
----
key: "access"
privileges:
  - condition: "\"@(/age)\" > 5 && \"@(/gender)\" == \"F\""
  - condition: "\"@(/age)\" > 10 && \"@(/gender)\" == \"F\""
scopes:
  - condition: "\"@(/age)\" > 5 && \"@(/gender)\" == \"F\""
    where:
      op: "GE"
      entity: "user"
      column: "age"
      parameters:
        - 5
  - condition: "\"@(/age)\" < 5 && \"@(/gender)\" == \"F\""
    where:
      op: "GE"
      entity: "user"
      column: "age"
      parameters:
        - 5
fields:
  - condition: "\"@(/age)\" > 5 && \"@(/gender)\" == \"F\""
    paths:
      - "/married"
  - condition: "\"@(/age)\" > 10 && \"@(/gender)\" == \"F\""
    paths:
----

执行访问控制策略
[source, JAVA, indent=0]
----
include::{sourcedir}/ExampleAccessControlService.java[]
----


[[动态访问控制架构]]
== 动态访问控制架构
访问控制架构

image::{imagedir}/access.png[alt 架构图,width=300,height=300]

 访问控制架构说明： 管理员依据资源提供的访问控制元数据配置访问控制策略，当业务人员访问相关资源的接口时，访问控制引擎根据元数据加载并执行对应的访问控制策略，完成操作权限验证、数据内容的过滤。

__关于数据权限的说明：数据权限需要业务服务配合实现 `Specification` 接口完成数据过滤条件的拼装__

[[核心概念]]
== 核心概念
在**access**访问控制组件中，将访问控制模型抽象为元数据 `MetaData` 和策略 `AccessControlDefinition` ，通过定义的策略验证元数据是否满足策略中配置的条件判断有权限访问、操作资源。

[[元数据定义]]
=== MetaData
首先，元数据 `MetaData` 是一个 `空接口`，根据实际的业务需要扩展不同的属性，可以包含用户的基本信息，例如：角色，是否管理员等等，也可以包含业务单据的信息，例如：单据状态，单据中相关人员信息等，所有你需要用来判断权限的条件都可以扩展到元数据。
其次，元数据 `MetaData` 需要开发人员在明确相应资源的访问控制策略后，根据实际情况拼装而来，后续业务人员根据暴露的元数据实现规则策略的定义。

[[策略定义]]
=== AccessControlDefinition
在实际的访问控制场景中，访问控制主要分为*功能*、*数据*两部分，其中数据又细分为*范围*、*内容*两部分，因此策略定义抽象为：`Privilege` 权限控制、`Scope` 范围控制, `View` 内容控制三部分。

=== Privilege
一个访问控制策略，可以定义多个权限控制策略，每个权限控制策略由一个条件表达式组成，当多个条件表达式中的任意一个条件成立，则表示用户具备访问权限。

=== Scope
一个访问控制策略，可以定义多个范围控制策略，每个范围控制策略由一个条件表达式，一个范围过滤条件,组合而成，当多个条件表达式中的任意一个条件成立，则将范围过滤条件传入业务服务中，由业务开发人员根据条件选择过滤逻辑。

访问范围控制主要适用于列表页面，不同人员看到不同行数据内容（横向行数不一致）


因为过滤条件涉及到逻辑操作（或，且）等，所以只是将表名、字段传给业务服务，业务服务无法判断不同字段之间的逻辑关系，如果直接传入SQL过滤语句，不同的后端存储介质，方言也不一样，同时，业务服务还需要额外的解析过滤语句，所以，这里借鉴 << JPA CriteriaBuilder>> 接口的实现方式定义了 `Specification` 接口，业务服务在实现数据权限时，实现 `Specification`接口完成过滤条件的拼接。

数据权限过滤实现示例代码
[source, JAVA, indent=0]
----
include::{sourcedir}/ExampleSpecification.java[]
----

=== View
一个访问控制策略，可以定义多个内容控制策略，每个内容控制策略由一个条件表达式，一个忽略字段列表,组合而成，当多个条件表达式中的任意一个条件成立，则根据忽略字段列表中定义的字段，利用反射将字段设置为null或者删除对应的行数据。

访问内容控制主要适用于详情页面，不同人员看到不同字段内容（纵向字段不一致）

__特别说明：这里采用反射的方式重置部分字段，或者列表的内容，暂不支持列表中的字段控制，如果有需要，可以考虑采用 `Jackson View`的方式处理__

[[遗留问题]]
== 遗留问题

=== 性能测试
目前暂为针对性的验证框架的性能数据，后续随着组件的迭代，逐渐增加。。。

=== 前端配置界面的开发
目前access访问控制组件的策略定义仅完成了主体框架的定义，策略的加载仅支持Resources文件，后续增加数据库存储以及前端配置页面

=== 操作权限如何透出前端
目前access访问控制组件主要是面向后端接口服务，如果采用了该方式，前端页面暂时需要展示所有操作按钮，后续增加前端按钮显示的逻辑。

=== 列表元素的字段控制
目前字段控制借鉴了Jackson JsonPoint的思路，实现字段路径的访问，因此，暂时不支持列表元素的字段控制，后续考虑增加对列表元素的字段控制。
另外，由于数据结构的复杂性，例如Map嵌套List再嵌套Map等多种数据结构嵌套场景，过滤字段的规则描述将变得复杂，因此前期也没有增加对列表元素的字段控制。